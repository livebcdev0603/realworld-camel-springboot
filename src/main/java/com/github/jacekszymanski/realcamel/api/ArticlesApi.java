/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.jacekszymanski.realcamel.api;

import com.github.jacekszymanski.realcamel.model.CreateArticle201Response;
import com.github.jacekszymanski.realcamel.model.CreateArticleRequest;
import com.github.jacekszymanski.realcamel.model.GetArticlesFeed200Response;
import com.github.jacekszymanski.realcamel.model.UpdateArticleRequest;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.stereotype.Component;
import com.github.jacekszymanski.realcamel.model.*;

@Component
public class ArticlesApi extends RouteBuilder {

    @Override
    public void configure() throws Exception {


        /**
        POST /articles : Create an article
        **/
        rest()
            .securityDefinitions()
                .apiKey("Token")
                    .withHeader("Token")

            .endSecurityDefinition()
            .post("/articles")
                .description("Create an article")
                .id("createArticleApi")
                .produces("application/json")
                .outType(CreateArticle201Response.class)
                .consumes("application/json")
                .type(CreateArticleRequest.class)

                .param()
                    .name("article")
                    .type(RestParamType.body)
                    .required(true)
                    .description("Article to create")
                .endParam()
                .to("direct:createArticle");


        /**
        DELETE /articles/{slug} : Delete an article
        **/
        rest()
            .securityDefinitions()
                .apiKey("Token")
                    .withHeader("Token")

            .endSecurityDefinition()
            .delete("/articles/{slug}")
                .description("Delete an article")
                .id("deleteArticleApi")
                .produces("application/json")
                .outType(Void.class)
                .param()
                    .name("slug")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Slug of the article to delete")
                .endParam()
                .to("direct:deleteArticle");


        /**
        GET /articles/{slug} : Get an article
        **/
        rest()
            .get("/articles/{slug}")
                .description("Get an article")
                .id("getArticleApi")
                .produces("application/json")
                .outType(CreateArticle201Response.class)
                .param()
                    .name("slug")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Slug of the article to get")
                .endParam()
                .to("direct:getArticle");


        /**
        GET /articles : Get recent articles globally
        **/
        rest()
            .get("/articles")
                .description("Get recent articles globally")
                .id("getArticlesApi")
                .produces("application/json")
                .outType(GetArticlesFeed200Response.class)
                .param()
                    .name("tag")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Filter by tag")
                .endParam()
                .param()
                    .name("author")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Filter by author (username)")
                .endParam()
                .param()
                    .name("favorited")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Filter by favorites of a user (username)")
                .endParam()
                .param()
                    .name("offset")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The number of items to skip before starting to collect the result set.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The numbers of items to return.")
                .endParam()
                .to("direct:getArticles");


        /**
        GET /articles/feed : Get recent articles from users you follow
        **/
        rest()
            .securityDefinitions()
                .apiKey("Token")
                    .withHeader("Token")

            .endSecurityDefinition()
            .get("/articles/feed")
                .description("Get recent articles from users you follow")
                .id("getArticlesFeedApi")
                .produces("application/json")
                .outType(GetArticlesFeed200Response.class)
                .param()
                    .name("offset")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The number of items to skip before starting to collect the result set.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The numbers of items to return.")
                .endParam()
                .to("direct:getArticlesFeed");


        /**
        PUT /articles/{slug} : Update an article
        **/
        rest()
            .securityDefinitions()
                .apiKey("Token")
                    .withHeader("Token")

            .endSecurityDefinition()
            .put("/articles/{slug}")
                .description("Update an article")
                .id("updateArticleApi")
                .produces("application/json")
                .outType(CreateArticle201Response.class)
                .consumes("application/json")
                .type(UpdateArticleRequest.class)

                .param()
                    .name("slug")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Slug of the article to update")
                .endParam()
                .param()
                    .name("article")
                    .type(RestParamType.body)
                    .required(true)
                    .description("Article to update")
                .endParam()
                .to("direct:updateArticle");

    }
}

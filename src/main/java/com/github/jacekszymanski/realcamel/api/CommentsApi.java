/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.jacekszymanski.realcamel.api;

import com.github.jacekszymanski.realcamel.model.CreateArticleComment200Response;
import com.github.jacekszymanski.realcamel.model.CreateArticleCommentRequest;
import com.github.jacekszymanski.realcamel.model.GetArticleComments200Response;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.stereotype.Component;
import com.github.jacekszymanski.realcamel.model.*;

@Component
public class CommentsApi extends RouteBuilder {

    @Override
    public void configure() throws Exception {


        /**
        POST /articles/{slug}/comments : Create a comment for an article
        **/
        rest()
            .securityDefinitions()
                .apiKey("Token")
                    .withHeader("Token")

            .endSecurityDefinition()
            .post("/articles/{slug}/comments")
                .description("Create a comment for an article")
                .id("createArticleCommentApi")
                .produces("application/json")
                .outType(CreateArticleComment200Response.class)
                .consumes("application/json")
                .type(CreateArticleCommentRequest.class)

                .param()
                    .name("slug")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Slug of the article that you want to create a comment for")
                .endParam()
                .param()
                    .name("comment")
                    .type(RestParamType.body)
                    .required(true)
                    .description("Comment you want to create")
                .endParam()
                .to("direct:createArticleComment");


        /**
        DELETE /articles/{slug}/comments/{id} : Delete a comment for an article
        **/
        rest()
            .securityDefinitions()
                .apiKey("Token")
                    .withHeader("Token")

            .endSecurityDefinition()
            .delete("/articles/{slug}/comments/{id}")
                .description("Delete a comment for an article")
                .id("deleteArticleCommentApi")
                .produces("application/json")
                .outType(Void.class)
                .param()
                    .name("slug")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Slug of the article that you want to delete a comment for")
                .endParam()
                .param()
                    .name("id")
                    .type(RestParamType.path)
                    .required(true)
                    .description("ID of the comment you want to delete")
                .endParam()
                .to("direct:deleteArticleComment");


        /**
        GET /articles/{slug}/comments : Get comments for an article
        **/
        rest()
            .get("/articles/{slug}/comments")
                .description("Get comments for an article")
                .id("getArticleCommentsApi")
                .produces("application/json")
                .outType(GetArticleComments200Response.class)
                .param()
                    .name("slug")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Slug of the article that you want to get comments for")
                .endParam()
                .to("direct:getArticleComments");

    }
}
